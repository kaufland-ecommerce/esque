# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer, BaseSerializer, NamedTupleSerializer, Schema, booleanSerializer, int16Serializer, int32Serializer,
    int64Serializer, stringSerializer
)


@dataclass
class Topics:
    # Name of topic
    topic: "str"  # STRING

    # List of partition ids of the topic.
    partitions: List["int"]  # INT32


@dataclass
class DescribeLogDirsRequestData(RequestData):
    topics: List["Topics"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.DESCRIBE_LOG_DIRS  # == 35


@dataclass
class Partitions:
    # Topic partition id
    partition: "int"  # INT32

    # The size of the log segments of the partition in bytes.
    size: "int"  # INT64

    # The lag of the log's LEO w.r.t. partition's HW (if it is the current log for the partition) or
    # current replica's LEO (if it is the future log for the partition)
    offset_lag: "int"  # INT64

    # True if this log is created by AlterReplicaLogDirsRequest and will replace the current log of the
    # replica in the future.
    is_future: "bool"  # BOOLEAN


@dataclass
class Topics:
    # Name of topic
    topic: "str"  # STRING

    partitions: List["Partitions"]


@dataclass
class LogDirs:
    # Response error code
    error_code: "int"  # INT16

    # The absolute log directory path.
    log_dir: "str"  # STRING

    topics: List["Topics"]


@dataclass
class DescribeLogDirsResponseData(ResponseData):
    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    log_dirs: List["LogDirs"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.DESCRIBE_LOG_DIRS  # == 35


topicsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("partitions", ArraySerializer(int32Serializer))],
    1: [("topic", stringSerializer), ("partitions", ArraySerializer(int32Serializer))],
}


topicsSerializers: Dict[int, BaseSerializer[Topics]] = {
    version: NamedTupleSerializer(Topics, schema) for version, schema in topicsSchemas.items()
}


describeLogDirsRequestDataSchemas: Dict[int, Schema] = {
    0: [("topics", ArraySerializer(topicsSerializers[0]))],
    1: [("topics", ArraySerializer(topicsSerializers[1]))],
}


describeLogDirsRequestDataSerializers: Dict[int, BaseSerializer[DescribeLogDirsRequestData]] = {
    version: NamedTupleSerializer(DescribeLogDirsRequestData, schema)
    for version, schema in describeLogDirsRequestDataSchemas.items()
}


partitionsSchemas: Dict[int, Schema] = {
    0: [
        ("partition", int32Serializer),
        ("size", int64Serializer),
        ("offset_lag", int64Serializer),
        ("is_future", booleanSerializer),
    ],
    1: [
        ("partition", int32Serializer),
        ("size", int64Serializer),
        ("offset_lag", int64Serializer),
        ("is_future", booleanSerializer),
    ],
}


partitionsSerializers: Dict[int, BaseSerializer[Partitions]] = {
    version: NamedTupleSerializer(Partitions, schema) for version, schema in partitionsSchemas.items()
}


topicsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("partitions", ArraySerializer(partitionsSerializers[0]))],
    1: [("topic", stringSerializer), ("partitions", ArraySerializer(partitionsSerializers[1]))],
}


topicsSerializers: Dict[int, BaseSerializer[Topics]] = {
    version: NamedTupleSerializer(Topics, schema) for version, schema in topicsSchemas.items()
}


logDirsSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("log_dir", stringSerializer),
        ("topics", ArraySerializer(topicsSerializers[0])),
    ],
    1: [
        ("error_code", int16Serializer),
        ("log_dir", stringSerializer),
        ("topics", ArraySerializer(topicsSerializers[1])),
    ],
}


logDirsSerializers: Dict[int, BaseSerializer[LogDirs]] = {
    version: NamedTupleSerializer(LogDirs, schema) for version, schema in logDirsSchemas.items()
}


describeLogDirsResponseDataSchemas: Dict[int, Schema] = {
    0: [("throttle_time_ms", int32Serializer), ("log_dirs", ArraySerializer(logDirsSerializers[0]))],
    1: [("throttle_time_ms", int32Serializer), ("log_dirs", ArraySerializer(logDirsSerializers[1]))],
}


describeLogDirsResponseDataSerializers: Dict[int, BaseSerializer[DescribeLogDirsResponseData]] = {
    version: NamedTupleSerializer(DescribeLogDirsResponseData, schema)
    for version, schema in describeLogDirsResponseDataSchemas.items()
}
