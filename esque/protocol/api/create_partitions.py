# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer, BaseSerializer, NamedTupleSerializer, Schema, booleanSerializer, int16Serializer, int32Serializer,
    nullableStringSerializer, stringSerializer
)


@dataclass
class NewPartitions:
    # The new partition count.
    count: "int"  # INT32

    # The assigned brokers.
    assignment: List[List["int"]]  # INT32


@dataclass
class TopicPartitions:
    # Name of topic
    topic: "str"  # STRING

    new_partitions: "NewPartitions"


@dataclass
class CreatePartitionsRequestData(RequestData):
    # List of topic and the corresponding new partitions.
    topic_partitions: List["TopicPartitions"]

    # The time in ms to wait for the partitions to be created.
    timeout: "int"  # INT32

    # If true then validate the request, but don't actually increase the number of partitions.
    validate_only: "bool"  # BOOLEAN

    @staticmethod
    def api_key() -> int:
        return ApiKey.CREATE_PARTITIONS  # == 37


@dataclass
class TopicErrors:
    # Name of topic
    topic: "str"  # STRING

    # Response error code
    error_code: "int"  # INT16

    # Response error message
    error_message: "Optional[str]"  # NULLABLE_STRING


@dataclass
class CreatePartitionsResponseData(ResponseData):
    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    # Per topic results for the create partitions request
    topic_errors: List["TopicErrors"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.CREATE_PARTITIONS  # == 37


newPartitionsSchemas: Dict[int, Schema] = {
    0: [("count", int32Serializer), ("assignment", ArraySerializer(ArraySerializer(int32Serializer)))],
    1: [("count", int32Serializer), ("assignment", ArraySerializer(ArraySerializer(int32Serializer)))],
}


newPartitionsSerializers: Dict[int, BaseSerializer[NewPartitions]] = {
    version: NamedTupleSerializer(NewPartitions, schema) for version, schema in newPartitionsSchemas.items()
}


topicPartitionsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("new_partitions", newPartitionsSerializers[0])],
    1: [("topic", stringSerializer), ("new_partitions", newPartitionsSerializers[1])],
}


topicPartitionsSerializers: Dict[int, BaseSerializer[TopicPartitions]] = {
    version: NamedTupleSerializer(TopicPartitions, schema) for version, schema in topicPartitionsSchemas.items()
}


createPartitionsRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("topic_partitions", ArraySerializer(topicPartitionsSerializers[0])),
        ("timeout", int32Serializer),
        ("validate_only", booleanSerializer),
    ],
    1: [
        ("topic_partitions", ArraySerializer(topicPartitionsSerializers[1])),
        ("timeout", int32Serializer),
        ("validate_only", booleanSerializer),
    ],
}


createPartitionsRequestDataSerializers: Dict[int, BaseSerializer[CreatePartitionsRequestData]] = {
    version: NamedTupleSerializer(CreatePartitionsRequestData, schema)
    for version, schema in createPartitionsRequestDataSchemas.items()
}


topicErrorsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("error_code", int16Serializer), ("error_message", nullableStringSerializer)],
    1: [("topic", stringSerializer), ("error_code", int16Serializer), ("error_message", nullableStringSerializer)],
}


topicErrorsSerializers: Dict[int, BaseSerializer[TopicErrors]] = {
    version: NamedTupleSerializer(TopicErrors, schema) for version, schema in topicErrorsSchemas.items()
}


createPartitionsResponseDataSchemas: Dict[int, Schema] = {
    0: [("throttle_time_ms", int32Serializer), ("topic_errors", ArraySerializer(topicErrorsSerializers[0]))],
    1: [("throttle_time_ms", int32Serializer), ("topic_errors", ArraySerializer(topicErrorsSerializers[1]))],
}


createPartitionsResponseDataSerializers: Dict[int, BaseSerializer[CreatePartitionsResponseData]] = {
    version: NamedTupleSerializer(CreatePartitionsResponseData, schema)
    for version, schema in createPartitionsResponseDataSchemas.items()
}
