# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer, BaseSerializer, DummySerializer, NamedTupleSerializer, Schema, int16Serializer, int32Serializer,
    stringSerializer
)


@dataclass
class ListGroupsRequestData(RequestData):
    @staticmethod
    def api_key() -> int:
        return ApiKey.LIST_GROUPS  # == 16


@dataclass
class Groups:
    # The unique group identifier
    group_id: "str"  # STRING

    protocol_type: "str"  # STRING


@dataclass
class ListGroupsResponseData(ResponseData):
    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    # Response error code
    error_code: "int"  # INT16

    groups: List["Groups"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.LIST_GROUPS  # == 16


listGroupsRequestDataSchemas: Dict[int, Schema] = {0: [], 1: [], 2: []}


listGroupsRequestDataSerializers: Dict[int, BaseSerializer[ListGroupsRequestData]] = {
    version: NamedTupleSerializer(ListGroupsRequestData, schema)
    for version, schema in listGroupsRequestDataSchemas.items()
}


groupsSchemas: Dict[int, Schema] = {
    0: [("group_id", stringSerializer), ("protocol_type", stringSerializer)],
    1: [("group_id", stringSerializer), ("protocol_type", stringSerializer)],
    2: [("group_id", stringSerializer), ("protocol_type", stringSerializer)],
}


groupsSerializers: Dict[int, BaseSerializer[Groups]] = {
    version: NamedTupleSerializer(Groups, schema) for version, schema in groupsSchemas.items()
}


listGroupsResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("groups", ArraySerializer(groupsSerializers[0])),
        ("throttle_time_ms", DummySerializer(int())),
    ],
    1: [
        ("throttle_time_ms", int32Serializer),
        ("error_code", int16Serializer),
        ("groups", ArraySerializer(groupsSerializers[1])),
    ],
    2: [
        ("throttle_time_ms", int32Serializer),
        ("error_code", int16Serializer),
        ("groups", ArraySerializer(groupsSerializers[2])),
    ],
}


listGroupsResponseDataSerializers: Dict[int, BaseSerializer[ListGroupsResponseData]] = {
    version: NamedTupleSerializer(ListGroupsResponseData, schema)
    for version, schema in listGroupsResponseDataSchemas.items()
}
