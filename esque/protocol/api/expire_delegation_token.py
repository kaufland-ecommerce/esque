# FIXME autogenerated module, check for errors!
from typing import Dict

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    BaseSerializer, NamedTupleSerializer, Schema, bytesSerializer, int16Serializer, int32Serializer, int64Serializer
)


@dataclass
class ExpireDelegationTokenRequestData(RequestData):
    # HMAC of the delegation token to be expired.
    hmac: "bytes"  # BYTES

    # expiry time period in milli seconds.
    expiry_time_period: "int"  # INT64

    @staticmethod
    def api_key() -> int:
        return ApiKey.EXPIRE_DELEGATION_TOKEN  # == 40


@dataclass
class ExpireDelegationTokenResponseData(ResponseData):
    # Response error code
    error_code: "int"  # INT16

    # timestamp (in msec) at which this token expires..
    expiry_timestamp: "int"  # INT64

    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    @staticmethod
    def api_key() -> int:
        return ApiKey.EXPIRE_DELEGATION_TOKEN  # == 40


expireDelegationTokenRequestDataSchemas: Dict[int, Schema] = {
    0: [("hmac", bytesSerializer), ("expiry_time_period", int64Serializer)],
    1: [("hmac", bytesSerializer), ("expiry_time_period", int64Serializer)],
}


expireDelegationTokenRequestDataSerializers: Dict[int, BaseSerializer[ExpireDelegationTokenRequestData]] = {
    version: NamedTupleSerializer(ExpireDelegationTokenRequestData, schema)
    for version, schema in expireDelegationTokenRequestDataSchemas.items()
}


expireDelegationTokenResponseDataSchemas: Dict[int, Schema] = {
    0: [("error_code", int16Serializer), ("expiry_timestamp", int64Serializer), ("throttle_time_ms", int32Serializer)],
    1: [("error_code", int16Serializer), ("expiry_timestamp", int64Serializer), ("throttle_time_ms", int32Serializer)],
}


expireDelegationTokenResponseDataSerializers: Dict[int, BaseSerializer[ExpireDelegationTokenResponseData]] = {
    version: NamedTupleSerializer(ExpireDelegationTokenResponseData, schema)
    for version, schema in expireDelegationTokenResponseDataSchemas.items()
}
