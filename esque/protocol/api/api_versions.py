# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer,
    BaseSerializer,
    DummySerializer,
    NamedTupleSerializer,
    Schema,
    int16Serializer,
    int32Serializer,
)


@dataclass
class ApiVersionsRequestData(RequestData):
    @staticmethod
    def api_key() -> int:
        return ApiKey.API_VERSIONS  # == 18


@dataclass
class ApiVersions:
    # API key.
    api_key: "int"  # INT16

    # Minimum supported version.
    min_version: "int"  # INT16

    # Maximum supported version.
    max_version: "int"  # INT16


@dataclass
class ApiVersionsResponseData(ResponseData):
    # Response error code
    error_code: "int"  # INT16

    # API versions supported by the broker.
    api_versions: List["ApiVersions"]

    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    @staticmethod
    def api_key() -> int:
        return ApiKey.API_VERSIONS  # == 18


apiVersionsRequestDataSchemas: Dict[int, Schema] = {0: [], 1: [], 2: []}


apiVersionsRequestDataSerializers: Dict[int, BaseSerializer[ApiVersionsRequestData]] = {
    version: NamedTupleSerializer(ApiVersionsRequestData, schema)
    for version, schema in apiVersionsRequestDataSchemas.items()
}


apiVersionsSchemas: Dict[int, Schema] = {
    0: [("api_key", int16Serializer), ("min_version", int16Serializer), ("max_version", int16Serializer)],
    1: [("api_key", int16Serializer), ("min_version", int16Serializer), ("max_version", int16Serializer)],
    2: [("api_key", int16Serializer), ("min_version", int16Serializer), ("max_version", int16Serializer)],
}


apiVersionsSerializers: Dict[int, BaseSerializer[ApiVersions]] = {
    version: NamedTupleSerializer(ApiVersions, schema) for version, schema in apiVersionsSchemas.items()
}


apiVersionsResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("api_versions", ArraySerializer(apiVersionsSerializers[0])),
        ("throttle_time_ms", DummySerializer(int())),
    ],
    1: [
        ("error_code", int16Serializer),
        ("api_versions", ArraySerializer(apiVersionsSerializers[1])),
        ("throttle_time_ms", int32Serializer),
    ],
    2: [
        ("error_code", int16Serializer),
        ("api_versions", ArraySerializer(apiVersionsSerializers[2])),
        ("throttle_time_ms", int32Serializer),
    ],
}


apiVersionsResponseDataSerializers: Dict[int, BaseSerializer[ApiVersionsResponseData]] = {
    version: NamedTupleSerializer(ApiVersionsResponseData, schema)
    for version, schema in apiVersionsResponseDataSchemas.items()
}
