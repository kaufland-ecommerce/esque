# FIXME autogenerated module, check for errors!
from dataclasses import dataclass
from typing import Dict, Tuple, List, Optional

from esque.protocol.api.base import *
from esque.protocol.serializers import *


@dataclass
class Owners:
    # principalType of the Kafka principal
    principal_type: "str"  # STRING

    # name of the Kafka principal
    name: "str"  # STRING


@dataclass
class DescribeDelegationTokenRequestData(RequestData):
    # An array of token owners.
    owners: List["Owners"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.DESCRIBE_DELEGATION_TOKEN  # == 41


@dataclass
class Owner:
    # principalType of the Kafka principal
    principal_type: "str"  # STRING

    # name of the Kafka principal
    name: "str"  # STRING


@dataclass
class Renewers:
    # principalType of the Kafka principal
    principal_type: "str"  # STRING

    # name of the Kafka principal
    name: "str"  # STRING


@dataclass
class TokenDetails:
    # token owner.
    owner: "Owner"

    # timestamp (in msec) when this token was generated.
    issue_timestamp: "int"  # INT64

    # timestamp (in msec) at which this token expires.
    expiry_timestamp: "int"  # INT64

    # max life time of this token.
    max_timestamp: "int"  # INT64

    # UUID to ensure uniqueness.
    token_id: "str"  # STRING

    # HMAC of the delegation token to be expired.
    hmac: "bytes"  # BYTES

    # An array of token renewers. Renewer is an Kafka PrincipalType and name string, who is allowed to
    # renew this token before the max lifetime expires.
    renewers: List["Renewers"]


@dataclass
class DescribeDelegationTokenResponseData(ResponseData):
    # Response error code
    error_code: "int"  # INT16

    token_details: List["TokenDetails"]

    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    @staticmethod
    def api_key() -> int:
        return ApiKey.DESCRIBE_DELEGATION_TOKEN  # == 41


ownersSchemas: Dict[int, Schema] = {
    0: [("principal_type", stringSerializer), ("name", stringSerializer)],
    1: [("principal_type", stringSerializer), ("name", stringSerializer)],
}


ownersSerializers: Dict[int, BaseSerializer[Owners]] = {
    version: NamedTupleSerializer(Owners, schema) for version, schema in ownersSchemas.items()
}


describeDelegationTokenRequestDataSchemas: Dict[int, Schema] = {
    0: [("owners", ArraySerializer(ownersSerializers[0]))],
    1: [("owners", ArraySerializer(ownersSerializers[1]))],
}


describeDelegationTokenRequestDataSerializers: Dict[int, BaseSerializer[DescribeDelegationTokenRequestData]] = {
    version: NamedTupleSerializer(DescribeDelegationTokenRequestData, schema)
    for version, schema in describeDelegationTokenRequestDataSchemas.items()
}


ownerSchemas: Dict[int, Schema] = {
    0: [("principal_type", stringSerializer), ("name", stringSerializer)],
    1: [("principal_type", stringSerializer), ("name", stringSerializer)],
}


ownerSerializers: Dict[int, BaseSerializer[Owner]] = {
    version: NamedTupleSerializer(Owner, schema) for version, schema in ownerSchemas.items()
}


renewersSchemas: Dict[int, Schema] = {
    0: [("principal_type", stringSerializer), ("name", stringSerializer)],
    1: [("principal_type", stringSerializer), ("name", stringSerializer)],
}


renewersSerializers: Dict[int, BaseSerializer[Renewers]] = {
    version: NamedTupleSerializer(Renewers, schema) for version, schema in renewersSchemas.items()
}


tokenDetailsSchemas: Dict[int, Schema] = {
    0: [
        ("owner", ownerSerializers[0]),
        ("issue_timestamp", int64Serializer),
        ("expiry_timestamp", int64Serializer),
        ("max_timestamp", int64Serializer),
        ("token_id", stringSerializer),
        ("hmac", bytesSerializer),
        ("renewers", ArraySerializer(renewersSerializers[0])),
    ],
    1: [
        ("owner", ownerSerializers[1]),
        ("issue_timestamp", int64Serializer),
        ("expiry_timestamp", int64Serializer),
        ("max_timestamp", int64Serializer),
        ("token_id", stringSerializer),
        ("hmac", bytesSerializer),
        ("renewers", ArraySerializer(renewersSerializers[1])),
    ],
}


tokenDetailsSerializers: Dict[int, BaseSerializer[TokenDetails]] = {
    version: NamedTupleSerializer(TokenDetails, schema) for version, schema in tokenDetailsSchemas.items()
}


describeDelegationTokenResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("token_details", ArraySerializer(tokenDetailsSerializers[0])),
        ("throttle_time_ms", int32Serializer),
    ],
    1: [
        ("error_code", int16Serializer),
        ("token_details", ArraySerializer(tokenDetailsSerializers[1])),
        ("throttle_time_ms", int32Serializer),
    ],
}


describeDelegationTokenResponseDataSerializers: Dict[int, BaseSerializer[DescribeDelegationTokenResponseData]] = {
    version: NamedTupleSerializer(DescribeDelegationTokenResponseData, schema)
    for version, schema in describeDelegationTokenResponseDataSchemas.items()
}
