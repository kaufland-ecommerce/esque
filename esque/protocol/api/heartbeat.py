# FIXME autogenerated module, check for errors!
from dataclasses import dataclass
from typing import Dict, Tuple, List, Optional

from esque.protocol.api.base import *
from esque.protocol.serializers import *


@dataclass
class HeartbeatRequestData(RequestData):
    # The group id.
    group_id: "str"  # STRING

    # The generation of the group.
    generation_id: "int"  # INT32

    # The member ID.
    member_id: "str"  # STRING

    # The unique identifier of the consumer instance provided by end user.
    group_instance_id: "Optional[str]"  # NULLABLE_STRING

    @staticmethod
    def api_key() -> int:
        return ApiKey.HEARTBEAT  # == 12


@dataclass
class HeartbeatResponseData(ResponseData):
    # The duration in milliseconds for which the request was throttled due to a quota violation, or zero
    # if the request did not violate any quota.
    throttle_time_ms: "int"  # INT32

    # The error code, or 0 if there was no error.
    error_code: "int"  # INT16

    @staticmethod
    def api_key() -> int:
        return ApiKey.HEARTBEAT  # == 12


heartbeatRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("group_id", stringSerializer),
        ("generation_id", int32Serializer),
        ("member_id", stringSerializer),
        ("group_instance_id", DummySerializer(None)),
    ],
    1: [
        ("group_id", stringSerializer),
        ("generation_id", int32Serializer),
        ("member_id", stringSerializer),
        ("group_instance_id", DummySerializer(None)),
    ],
    2: [
        ("group_id", stringSerializer),
        ("generation_id", int32Serializer),
        ("member_id", stringSerializer),
        ("group_instance_id", DummySerializer(None)),
    ],
    3: [
        ("group_id", stringSerializer),
        ("generation_id", int32Serializer),
        ("member_id", stringSerializer),
        ("group_instance_id", nullableStringSerializer),
    ],
}


heartbeatRequestDataSerializers: Dict[int, BaseSerializer[HeartbeatRequestData]] = {
    version: NamedTupleSerializer(HeartbeatRequestData, schema)
    for version, schema in heartbeatRequestDataSchemas.items()
}


heartbeatResponseDataSchemas: Dict[int, Schema] = {
    0: [("error_code", int16Serializer), ("throttle_time_ms", DummySerializer(int()))],
    1: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer)],
    2: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer)],
    3: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer)],
}


heartbeatResponseDataSerializers: Dict[int, BaseSerializer[HeartbeatResponseData]] = {
    version: NamedTupleSerializer(HeartbeatResponseData, schema)
    for version, schema in heartbeatResponseDataSchemas.items()
}
