# FIXME autogenerated module, check for errors!
from dataclasses import dataclass
from typing import Dict, Tuple, List, Optional

from esque.protocol.api.base import *
from esque.protocol.serializers import *


@dataclass
class Partitions:
    # Topic partition id
    partition: "int"  # INT32

    # Message offset to be committed
    offset: "int"  # INT64

    # The leader epoch, if provided is derived from the last consumed record. This is used by the consumer
    # to check for log truncation and to ensure partition metadata is up to date following a group
    # rebalance.
    leader_epoch: "int"  # INT32

    # Any associated metadata the client wants to keep.
    metadata: "Optional[str]"  # NULLABLE_STRING


@dataclass
class Topics:
    # Name of topic
    topic: "str"  # STRING

    # Partitions to commit offsets
    partitions: List["Partitions"]


@dataclass
class TxnOffsetCommitRequestData(RequestData):
    # The transactional id corresponding to the transaction.
    transactional_id: "str"  # STRING

    # The unique group identifier
    group_id: "str"  # STRING

    # Current producer id in use by the transactional id.
    producer_id: "int"  # INT64

    # Current epoch associated with the producer id.
    producer_epoch: "int"  # INT16

    # Topics to commit offsets
    topics: List["Topics"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.TXN_OFFSET_COMMIT  # == 28


@dataclass
class Partitions:
    # Topic partition id
    partition: "int"  # INT32

    # Response error code
    error_code: "int"  # INT16


@dataclass
class Topics:
    # Name of topic
    topic: "str"  # STRING

    # Responses by partition for committed offsets
    partitions: List["Partitions"]


@dataclass
class TxnOffsetCommitResponseData(ResponseData):
    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    # Responses by topic for committed offsets
    topics: List["Topics"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.TXN_OFFSET_COMMIT  # == 28


partitionsSchemas: Dict[int, Schema] = {
    0: [
        ("partition", int32Serializer),
        ("offset", int64Serializer),
        ("metadata", nullableStringSerializer),
        ("leader_epoch", DummySerializer(int())),
    ],
    1: [
        ("partition", int32Serializer),
        ("offset", int64Serializer),
        ("metadata", nullableStringSerializer),
        ("leader_epoch", DummySerializer(int())),
    ],
    2: [
        ("partition", int32Serializer),
        ("offset", int64Serializer),
        ("leader_epoch", int32Serializer),
        ("metadata", nullableStringSerializer),
    ],
}


partitionsSerializers: Dict[int, BaseSerializer[Partitions]] = {
    version: NamedTupleSerializer(Partitions, schema) for version, schema in partitionsSchemas.items()
}


topicsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("partitions", ArraySerializer(partitionsSerializers[0]))],
    1: [("topic", stringSerializer), ("partitions", ArraySerializer(partitionsSerializers[1]))],
    2: [("topic", stringSerializer), ("partitions", ArraySerializer(partitionsSerializers[2]))],
}


topicsSerializers: Dict[int, BaseSerializer[Topics]] = {
    version: NamedTupleSerializer(Topics, schema) for version, schema in topicsSchemas.items()
}


txnOffsetCommitRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("transactional_id", stringSerializer),
        ("group_id", stringSerializer),
        ("producer_id", int64Serializer),
        ("producer_epoch", int16Serializer),
        ("topics", ArraySerializer(topicsSerializers[0])),
    ],
    1: [
        ("transactional_id", stringSerializer),
        ("group_id", stringSerializer),
        ("producer_id", int64Serializer),
        ("producer_epoch", int16Serializer),
        ("topics", ArraySerializer(topicsSerializers[1])),
    ],
    2: [
        ("transactional_id", stringSerializer),
        ("group_id", stringSerializer),
        ("producer_id", int64Serializer),
        ("producer_epoch", int16Serializer),
        ("topics", ArraySerializer(topicsSerializers[2])),
    ],
}


txnOffsetCommitRequestDataSerializers: Dict[int, BaseSerializer[TxnOffsetCommitRequestData]] = {
    version: NamedTupleSerializer(TxnOffsetCommitRequestData, schema)
    for version, schema in txnOffsetCommitRequestDataSchemas.items()
}


partitionsSchemas: Dict[int, Schema] = {
    0: [("partition", int32Serializer), ("error_code", int16Serializer)],
    1: [("partition", int32Serializer), ("error_code", int16Serializer)],
    2: [("partition", int32Serializer), ("error_code", int16Serializer)],
}


partitionsSerializers: Dict[int, BaseSerializer[Partitions]] = {
    version: NamedTupleSerializer(Partitions, schema) for version, schema in partitionsSchemas.items()
}


topicsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("partitions", ArraySerializer(partitionsSerializers[0]))],
    1: [("topic", stringSerializer), ("partitions", ArraySerializer(partitionsSerializers[1]))],
    2: [("topic", stringSerializer), ("partitions", ArraySerializer(partitionsSerializers[2]))],
}


topicsSerializers: Dict[int, BaseSerializer[Topics]] = {
    version: NamedTupleSerializer(Topics, schema) for version, schema in topicsSchemas.items()
}


txnOffsetCommitResponseDataSchemas: Dict[int, Schema] = {
    0: [("throttle_time_ms", int32Serializer), ("topics", ArraySerializer(topicsSerializers[0]))],
    1: [("throttle_time_ms", int32Serializer), ("topics", ArraySerializer(topicsSerializers[1]))],
    2: [("throttle_time_ms", int32Serializer), ("topics", ArraySerializer(topicsSerializers[2]))],
}


txnOffsetCommitResponseDataSerializers: Dict[int, BaseSerializer[TxnOffsetCommitResponseData]] = {
    version: NamedTupleSerializer(TxnOffsetCommitResponseData, schema)
    for version, schema in txnOffsetCommitResponseDataSchemas.items()
}
