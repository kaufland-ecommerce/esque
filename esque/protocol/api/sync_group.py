# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer, BaseSerializer, DummySerializer, NamedTupleSerializer, Schema, bytesSerializer, int16Serializer,
    int32Serializer, nullableStringSerializer, stringSerializer
)


@dataclass
class Assignments:
    # The ID of the member to assign.
    member_id: "str"  # STRING

    # The member assignment.
    assignment: "bytes"  # BYTES


@dataclass
class SyncGroupRequestData(RequestData):
    # The unique group identifier.
    group_id: "str"  # STRING

    # The generation of the group.
    generation_id: "int"  # INT32

    # The ID of the member to assign.
    member_id: "str"  # STRING

    # The unique identifier of the consumer instance provided by end user.
    group_instance_id: "Optional[str]"  # NULLABLE_STRING

    # Each assignment.
    assignments: List["Assignments"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.SYNC_GROUP  # == 14


@dataclass
class SyncGroupResponseData(ResponseData):
    # The duration in milliseconds for which the request was throttled due to a quota violation, or zero
    # if the request did not violate any quota.
    throttle_time_ms: "int"  # INT32

    # The error code, or 0 if there was no error.
    error_code: "int"  # INT16

    # The member assignment.
    assignment: "bytes"  # BYTES

    @staticmethod
    def api_key() -> int:
        return ApiKey.SYNC_GROUP  # == 14


assignmentsSchemas: Dict[int, Schema] = {
    0: [("member_id", stringSerializer), ("assignment", bytesSerializer)],
    1: [("member_id", stringSerializer), ("assignment", bytesSerializer)],
    2: [("member_id", stringSerializer), ("assignment", bytesSerializer)],
    3: [("member_id", stringSerializer), ("assignment", bytesSerializer)],
}


assignmentsSerializers: Dict[int, BaseSerializer[Assignments]] = {
    version: NamedTupleSerializer(Assignments, schema) for version, schema in assignmentsSchemas.items()
}


syncGroupRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("group_id", stringSerializer),
        ("generation_id", int32Serializer),
        ("member_id", stringSerializer),
        ("assignments", ArraySerializer(assignmentsSerializers[0])),
        ("group_instance_id", DummySerializer(None)),
    ],
    1: [
        ("group_id", stringSerializer),
        ("generation_id", int32Serializer),
        ("member_id", stringSerializer),
        ("assignments", ArraySerializer(assignmentsSerializers[1])),
        ("group_instance_id", DummySerializer(None)),
    ],
    2: [
        ("group_id", stringSerializer),
        ("generation_id", int32Serializer),
        ("member_id", stringSerializer),
        ("assignments", ArraySerializer(assignmentsSerializers[2])),
        ("group_instance_id", DummySerializer(None)),
    ],
    3: [
        ("group_id", stringSerializer),
        ("generation_id", int32Serializer),
        ("member_id", stringSerializer),
        ("group_instance_id", nullableStringSerializer),
        ("assignments", ArraySerializer(assignmentsSerializers[3])),
    ],
}


syncGroupRequestDataSerializers: Dict[int, BaseSerializer[SyncGroupRequestData]] = {
    version: NamedTupleSerializer(SyncGroupRequestData, schema)
    for version, schema in syncGroupRequestDataSchemas.items()
}


syncGroupResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("assignment", bytesSerializer),
        ("throttle_time_ms", DummySerializer(int())),
    ],
    1: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer), ("assignment", bytesSerializer)],
    2: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer), ("assignment", bytesSerializer)],
    3: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer), ("assignment", bytesSerializer)],
}


syncGroupResponseDataSerializers: Dict[int, BaseSerializer[SyncGroupResponseData]] = {
    version: NamedTupleSerializer(SyncGroupResponseData, schema)
    for version, schema in syncGroupResponseDataSchemas.items()
}
