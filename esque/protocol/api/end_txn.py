# FIXME autogenerated module, check for errors!
from typing import Dict

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    BaseSerializer, NamedTupleSerializer, Schema, booleanSerializer, int16Serializer, int32Serializer, int64Serializer,
    stringSerializer
)


@dataclass
class EndTxnRequestData(RequestData):
    # The transactional id corresponding to the transaction.
    transactional_id: "str"  # STRING

    # Current producer id in use by the transactional id.
    producer_id: "int"  # INT64

    # Current epoch associated with the producer id.
    producer_epoch: "int"  # INT16

    # The result of the transaction (0 = ABORT, 1 = COMMIT)
    transaction_result: "bool"  # BOOLEAN

    @staticmethod
    def api_key() -> int:
        return ApiKey.END_TXN  # == 26


@dataclass
class EndTxnResponseData(ResponseData):
    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    # Response error code
    error_code: "int"  # INT16

    @staticmethod
    def api_key() -> int:
        return ApiKey.END_TXN  # == 26


endTxnRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("transactional_id", stringSerializer),
        ("producer_id", int64Serializer),
        ("producer_epoch", int16Serializer),
        ("transaction_result", booleanSerializer),
    ],
    1: [
        ("transactional_id", stringSerializer),
        ("producer_id", int64Serializer),
        ("producer_epoch", int16Serializer),
        ("transaction_result", booleanSerializer),
    ],
}


endTxnRequestDataSerializers: Dict[int, BaseSerializer[EndTxnRequestData]] = {
    version: NamedTupleSerializer(EndTxnRequestData, schema) for version, schema in endTxnRequestDataSchemas.items()
}


endTxnResponseDataSchemas: Dict[int, Schema] = {
    0: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer)],
    1: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer)],
}


endTxnResponseDataSerializers: Dict[int, BaseSerializer[EndTxnResponseData]] = {
    version: NamedTupleSerializer(EndTxnResponseData, schema) for version, schema in endTxnResponseDataSchemas.items()
}
