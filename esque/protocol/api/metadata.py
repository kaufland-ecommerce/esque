# FIXME autogenerated module, check for errors!
from dataclasses import dataclass
from typing import Dict, Tuple, List, Optional

from esque.protocol.api.base import *
from esque.protocol.serializers import *


@dataclass
class Topics:
    # The topic name.
    name: "str"  # STRING


@dataclass
class MetadataRequestData(RequestData):
    # The topics to fetch metadata for.
    topics: List["Topics"]

    # If this is true, the broker may auto-create topics that we requested which do not already exist, if
    # it is configured to do so.
    allow_auto_topic_creation: "bool"  # BOOLEAN

    # Whether to include cluster authorized operations.
    include_cluster_authorized_operations: "bool"  # BOOLEAN

    # Whether to include topic authorized operations.
    include_topic_authorized_operations: "bool"  # BOOLEAN

    @staticmethod
    def api_key() -> int:
        return ApiKey.METADATA  # == 3


@dataclass
class Brokers:
    # The broker ID.
    node_id: "int"  # INT32

    # The broker hostname.
    host: "str"  # STRING

    # The broker port.
    port: "int"  # INT32

    # The rack of the broker, or null if it has not been assigned to a rack.
    rack: "Optional[str]"  # NULLABLE_STRING


@dataclass
class Partitions:
    # The partition error, or 0 if there was no error.
    error_code: "int"  # INT16

    # The partition index.
    partition_index: "int"  # INT32

    # The ID of the leader broker.
    leader_id: "int"  # INT32

    # The leader epoch of this partition.
    leader_epoch: "int"  # INT32

    # The set of all nodes that host this partition.
    replica_nodes: List["int"]  # INT32

    # The set of nodes that are in sync with the leader for this partition.
    isr_nodes: List["int"]  # INT32

    # The set of offline replicas of this partition.
    offline_replicas: List["int"]  # INT32


@dataclass
class Topics:
    # The partition error, or 0 if there was no error.
    error_code: "int"  # INT16

    # The topic name.
    name: "str"  # STRING

    # True if the topic is internal.
    is_internal: "bool"  # BOOLEAN

    # Each partition in the topic.
    partitions: List["Partitions"]

    # 32-bit bitfield to represent authorized operations for this topic.
    topic_authorized_operations: "int"  # INT32


@dataclass
class MetadataResponseData(ResponseData):
    # The duration in milliseconds for which the request was throttled due to a quota violation, or zero
    # if the request did not violate any quota.
    throttle_time_ms: "int"  # INT32

    # Each broker in the response.
    brokers: List["Brokers"]

    # The cluster ID that responding broker belongs to.
    cluster_id: "Optional[str]"  # NULLABLE_STRING

    # The ID of the controller broker.
    controller_id: "int"  # INT32

    # Each topic in the response.
    topics: List["Topics"]

    # 32-bit bitfield to represent authorized operations for this cluster.
    cluster_authorized_operations: "int"  # INT32

    @staticmethod
    def api_key() -> int:
        return ApiKey.METADATA  # == 3


topicsSchemas: Dict[int, Schema] = {
    0: [("name", stringSerializer)],
    1: [("name", stringSerializer)],
    2: [("name", stringSerializer)],
    3: [("name", stringSerializer)],
    4: [("name", stringSerializer)],
    5: [("name", stringSerializer)],
    6: [("name", stringSerializer)],
    7: [("name", stringSerializer)],
    8: [("name", stringSerializer)],
}


topicsSerializers: Dict[int, BaseSerializer[Topics]] = {
    version: NamedTupleSerializer(Topics, schema) for version, schema in topicsSchemas.items()
}


metadataRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("topics", ArraySerializer(topicsSerializers[0])),
        ("allow_auto_topic_creation", DummySerializer(bool())),
        ("include_cluster_authorized_operations", DummySerializer(bool())),
        ("include_topic_authorized_operations", DummySerializer(bool())),
    ],
    1: [
        ("topics", ArraySerializer(topicsSerializers[1])),
        ("allow_auto_topic_creation", DummySerializer(bool())),
        ("include_cluster_authorized_operations", DummySerializer(bool())),
        ("include_topic_authorized_operations", DummySerializer(bool())),
    ],
    2: [
        ("topics", ArraySerializer(topicsSerializers[2])),
        ("allow_auto_topic_creation", DummySerializer(bool())),
        ("include_cluster_authorized_operations", DummySerializer(bool())),
        ("include_topic_authorized_operations", DummySerializer(bool())),
    ],
    3: [
        ("topics", ArraySerializer(topicsSerializers[3])),
        ("allow_auto_topic_creation", DummySerializer(bool())),
        ("include_cluster_authorized_operations", DummySerializer(bool())),
        ("include_topic_authorized_operations", DummySerializer(bool())),
    ],
    4: [
        ("topics", ArraySerializer(topicsSerializers[4])),
        ("allow_auto_topic_creation", booleanSerializer),
        ("include_cluster_authorized_operations", DummySerializer(bool())),
        ("include_topic_authorized_operations", DummySerializer(bool())),
    ],
    5: [
        ("topics", ArraySerializer(topicsSerializers[5])),
        ("allow_auto_topic_creation", booleanSerializer),
        ("include_cluster_authorized_operations", DummySerializer(bool())),
        ("include_topic_authorized_operations", DummySerializer(bool())),
    ],
    6: [
        ("topics", ArraySerializer(topicsSerializers[6])),
        ("allow_auto_topic_creation", booleanSerializer),
        ("include_cluster_authorized_operations", DummySerializer(bool())),
        ("include_topic_authorized_operations", DummySerializer(bool())),
    ],
    7: [
        ("topics", ArraySerializer(topicsSerializers[7])),
        ("allow_auto_topic_creation", booleanSerializer),
        ("include_cluster_authorized_operations", DummySerializer(bool())),
        ("include_topic_authorized_operations", DummySerializer(bool())),
    ],
    8: [
        ("topics", ArraySerializer(topicsSerializers[8])),
        ("allow_auto_topic_creation", booleanSerializer),
        ("include_cluster_authorized_operations", booleanSerializer),
        ("include_topic_authorized_operations", booleanSerializer),
    ],
}


metadataRequestDataSerializers: Dict[int, BaseSerializer[MetadataRequestData]] = {
    version: NamedTupleSerializer(MetadataRequestData, schema)
    for version, schema in metadataRequestDataSchemas.items()
}


brokersSchemas: Dict[int, Schema] = {
    0: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", DummySerializer(None)),
    ],
    1: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    2: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    3: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    4: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    5: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    6: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    7: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
    8: [
        ("node_id", int32Serializer),
        ("host", stringSerializer),
        ("port", int32Serializer),
        ("rack", nullableStringSerializer),
    ],
}


brokersSerializers: Dict[int, BaseSerializer[Brokers]] = {
    version: NamedTupleSerializer(Brokers, schema) for version, schema in brokersSchemas.items()
}


partitionsSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int())),
        ("offline_replicas", DummySerializer([])),
    ],
    1: [
        ("error_code", int16Serializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int())),
        ("offline_replicas", DummySerializer([])),
    ],
    2: [
        ("error_code", int16Serializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int())),
        ("offline_replicas", DummySerializer([])),
    ],
    3: [
        ("error_code", int16Serializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int())),
        ("offline_replicas", DummySerializer([])),
    ],
    4: [
        ("error_code", int16Serializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int())),
        ("offline_replicas", DummySerializer([])),
    ],
    5: [
        ("error_code", int16Serializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("offline_replicas", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int())),
    ],
    6: [
        ("error_code", int16Serializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("offline_replicas", ArraySerializer(int32Serializer)),
        ("leader_epoch", DummySerializer(int())),
    ],
    7: [
        ("error_code", int16Serializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("offline_replicas", ArraySerializer(int32Serializer)),
    ],
    8: [
        ("error_code", int16Serializer),
        ("partition_index", int32Serializer),
        ("leader_id", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("replica_nodes", ArraySerializer(int32Serializer)),
        ("isr_nodes", ArraySerializer(int32Serializer)),
        ("offline_replicas", ArraySerializer(int32Serializer)),
    ],
}


partitionsSerializers: Dict[int, BaseSerializer[Partitions]] = {
    version: NamedTupleSerializer(Partitions, schema) for version, schema in partitionsSchemas.items()
}


topicsSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("name", stringSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[0])),
        ("is_internal", DummySerializer(bool())),
        ("topic_authorized_operations", DummySerializer(int())),
    ],
    1: [
        ("error_code", int16Serializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[1])),
        ("topic_authorized_operations", DummySerializer(int())),
    ],
    2: [
        ("error_code", int16Serializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[2])),
        ("topic_authorized_operations", DummySerializer(int())),
    ],
    3: [
        ("error_code", int16Serializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[3])),
        ("topic_authorized_operations", DummySerializer(int())),
    ],
    4: [
        ("error_code", int16Serializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[4])),
        ("topic_authorized_operations", DummySerializer(int())),
    ],
    5: [
        ("error_code", int16Serializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[5])),
        ("topic_authorized_operations", DummySerializer(int())),
    ],
    6: [
        ("error_code", int16Serializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[6])),
        ("topic_authorized_operations", DummySerializer(int())),
    ],
    7: [
        ("error_code", int16Serializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[7])),
        ("topic_authorized_operations", DummySerializer(int())),
    ],
    8: [
        ("error_code", int16Serializer),
        ("name", stringSerializer),
        ("is_internal", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[8])),
        ("topic_authorized_operations", int32Serializer),
    ],
}


topicsSerializers: Dict[int, BaseSerializer[Topics]] = {
    version: NamedTupleSerializer(Topics, schema) for version, schema in topicsSchemas.items()
}


metadataResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("brokers", ArraySerializer(brokersSerializers[0])),
        ("topics", ArraySerializer(topicsSerializers[0])),
        ("throttle_time_ms", DummySerializer(int())),
        ("cluster_id", DummySerializer(None)),
        ("controller_id", DummySerializer(int())),
        ("cluster_authorized_operations", DummySerializer(int())),
    ],
    1: [
        ("brokers", ArraySerializer(brokersSerializers[1])),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicsSerializers[1])),
        ("throttle_time_ms", DummySerializer(int())),
        ("cluster_id", DummySerializer(None)),
        ("cluster_authorized_operations", DummySerializer(int())),
    ],
    2: [
        ("brokers", ArraySerializer(brokersSerializers[2])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicsSerializers[2])),
        ("throttle_time_ms", DummySerializer(int())),
        ("cluster_authorized_operations", DummySerializer(int())),
    ],
    3: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokersSerializers[3])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicsSerializers[3])),
        ("cluster_authorized_operations", DummySerializer(int())),
    ],
    4: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokersSerializers[4])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicsSerializers[4])),
        ("cluster_authorized_operations", DummySerializer(int())),
    ],
    5: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokersSerializers[5])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicsSerializers[5])),
        ("cluster_authorized_operations", DummySerializer(int())),
    ],
    6: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokersSerializers[6])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicsSerializers[6])),
        ("cluster_authorized_operations", DummySerializer(int())),
    ],
    7: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokersSerializers[7])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicsSerializers[7])),
        ("cluster_authorized_operations", DummySerializer(int())),
    ],
    8: [
        ("throttle_time_ms", int32Serializer),
        ("brokers", ArraySerializer(brokersSerializers[8])),
        ("cluster_id", nullableStringSerializer),
        ("controller_id", int32Serializer),
        ("topics", ArraySerializer(topicsSerializers[8])),
        ("cluster_authorized_operations", int32Serializer),
    ],
}


metadataResponseDataSerializers: Dict[int, BaseSerializer[MetadataResponseData]] = {
    version: NamedTupleSerializer(MetadataResponseData, schema)
    for version, schema in metadataResponseDataSchemas.items()
}
