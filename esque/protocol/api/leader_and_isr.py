# FIXME autogenerated module, check for errors!
from dataclasses import dataclass
from typing import Dict, Tuple, List, Optional

from esque.protocol.api.base import *
from esque.protocol.serializers import *


@dataclass
class PartitionStates:
    # Topic partition id
    partition: "int"  # INT32

    # The controller epoch
    controller_epoch: "int"  # INT32

    # The broker id for the leader.
    leader: "int"  # INT32

    # The leader epoch.
    leader_epoch: "int"  # INT32

    # The in sync replica ids.
    isr: List["int"]  # INT32

    # The ZK version.
    zk_version: "int"  # INT32

    # The replica ids.
    replicas: List["int"]  # INT32

    # Whether the replica should have existed on the broker or not
    is_new: "bool"  # BOOLEAN


@dataclass
class TopicStates:
    # Name of topic
    topic: "str"  # STRING

    # Partition states
    partition_states: List["PartitionStates"]


@dataclass
class LiveLeaders:
    # The broker id
    id: "int"  # INT32

    # The hostname of the broker.
    host: "str"  # STRING

    # The port on which the broker accepts requests.
    port: "int"  # INT32


@dataclass
class LeaderAndIsrRequestData(RequestData):
    # The controller id
    controller_id: "int"  # INT32

    # The controller epoch
    controller_epoch: "int"  # INT32

    # The broker epoch
    broker_epoch: "int"  # INT64

    # Topic states
    topic_states: List["TopicStates"]

    # Live leaders
    live_leaders: List["LiveLeaders"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.LEADER_AND_ISR  # == 4


@dataclass
class Partitions:
    # Name of topic
    topic: "str"  # STRING

    # Topic partition id
    partition: "int"  # INT32

    # Response error code
    error_code: "int"  # INT16


@dataclass
class LeaderAndIsrResponseData(ResponseData):
    # Response error code
    error_code: "int"  # INT16

    # Response for the requests partitions
    partitions: List["Partitions"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.LEADER_AND_ISR  # == 4


partitionStatesSchemas: Dict[int, Schema] = {
    0: [
        (None, stringSerializer),
        ("partition", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("leader", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("isr", ArraySerializer(int32Serializer)),
        ("zk_version", int32Serializer),
        ("replicas", ArraySerializer(int32Serializer)),
        ("is_new", DummySerializer(bool())),
    ],
    1: [
        (None, stringSerializer),
        ("partition", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("leader", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("isr", ArraySerializer(int32Serializer)),
        ("zk_version", int32Serializer),
        ("replicas", ArraySerializer(int32Serializer)),
        ("is_new", booleanSerializer),
    ],
    2: [
        ("partition", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("leader", int32Serializer),
        ("leader_epoch", int32Serializer),
        ("isr", ArraySerializer(int32Serializer)),
        ("zk_version", int32Serializer),
        ("replicas", ArraySerializer(int32Serializer)),
        ("is_new", booleanSerializer),
    ],
}


partitionStatesSerializers: Dict[int, BaseSerializer[PartitionStates]] = {
    version: NamedTupleSerializer(PartitionStates, schema) for version, schema in partitionStatesSchemas.items()
}


liveLeadersSchemas: Dict[int, Schema] = {
    0: [("id", int32Serializer), ("host", stringSerializer), ("port", int32Serializer)],
    1: [("id", int32Serializer), ("host", stringSerializer), ("port", int32Serializer)],
    2: [("id", int32Serializer), ("host", stringSerializer), ("port", int32Serializer)],
}


liveLeadersSerializers: Dict[int, BaseSerializer[LiveLeaders]] = {
    version: NamedTupleSerializer(LiveLeaders, schema) for version, schema in liveLeadersSchemas.items()
}


topicStatesSchemas: Dict[int, Schema] = {
    2: [("topic", stringSerializer), ("partition_states", ArraySerializer(partitionStatesSerializers[2]))]
}


topicStatesSerializers: Dict[int, BaseSerializer[TopicStates]] = {
    version: NamedTupleSerializer(TopicStates, schema) for version, schema in topicStatesSchemas.items()
}


leaderAndIsrRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("controller_id", int32Serializer),
        ("controller_epoch", int32Serializer),
        (None, ArraySerializer(partitionStatesSerializers[0])),
        ("live_leaders", ArraySerializer(liveLeadersSerializers[0])),
        ("broker_epoch", DummySerializer(int())),
        ("topic_states", DummySerializer([])),
    ],
    1: [
        ("controller_id", int32Serializer),
        ("controller_epoch", int32Serializer),
        (None, ArraySerializer(partitionStatesSerializers[1])),
        ("live_leaders", ArraySerializer(liveLeadersSerializers[1])),
        ("broker_epoch", DummySerializer(int())),
        ("topic_states", DummySerializer([])),
    ],
    2: [
        ("controller_id", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("broker_epoch", int64Serializer),
        ("topic_states", ArraySerializer(topicStatesSerializers[2])),
        ("live_leaders", ArraySerializer(liveLeadersSerializers[2])),
    ],
}


leaderAndIsrRequestDataSerializers: Dict[int, BaseSerializer[LeaderAndIsrRequestData]] = {
    version: NamedTupleSerializer(LeaderAndIsrRequestData, schema)
    for version, schema in leaderAndIsrRequestDataSchemas.items()
}


partitionsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("partition", int32Serializer), ("error_code", int16Serializer)],
    1: [("topic", stringSerializer), ("partition", int32Serializer), ("error_code", int16Serializer)],
    2: [("topic", stringSerializer), ("partition", int32Serializer), ("error_code", int16Serializer)],
}


partitionsSerializers: Dict[int, BaseSerializer[Partitions]] = {
    version: NamedTupleSerializer(Partitions, schema) for version, schema in partitionsSchemas.items()
}


leaderAndIsrResponseDataSchemas: Dict[int, Schema] = {
    0: [("error_code", int16Serializer), ("partitions", ArraySerializer(partitionsSerializers[0]))],
    1: [("error_code", int16Serializer), ("partitions", ArraySerializer(partitionsSerializers[1]))],
    2: [("error_code", int16Serializer), ("partitions", ArraySerializer(partitionsSerializers[2]))],
}


leaderAndIsrResponseDataSerializers: Dict[int, BaseSerializer[LeaderAndIsrResponseData]] = {
    version: NamedTupleSerializer(LeaderAndIsrResponseData, schema)
    for version, schema in leaderAndIsrResponseDataSchemas.items()
}
