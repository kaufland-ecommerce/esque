# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer, BaseSerializer, DummySerializer, NamedTupleSerializer, Schema, int16Serializer, int32Serializer,
    int8Serializer, nullableStringSerializer, stringSerializer
)


@dataclass
class DescribeAclsRequestData(RequestData):
    # The resource type
    resource_type: "int"  # INT8

    # The resource name filter
    resource_name: "Optional[str]"  # NULLABLE_STRING

    # The resource pattern type filter
    resource_pattern_type_filter: "int"  # INT8

    # The ACL principal filter
    principal: "Optional[str]"  # NULLABLE_STRING

    # The ACL host filter
    host: "Optional[str]"  # NULLABLE_STRING

    # The ACL operation
    operation: "int"  # INT8

    # The ACL permission type
    permission_type: "int"  # INT8

    @staticmethod
    def api_key() -> int:
        return ApiKey.DESCRIBE_ACLS  # == 29


@dataclass
class Acls:
    # The ACL principal
    principal: "str"  # STRING

    # The ACL host
    host: "str"  # STRING

    # The ACL operation
    operation: "int"  # INT8

    # The ACL permission type
    permission_type: "int"  # INT8


@dataclass
class Resources:
    # The resource type
    resource_type: "int"  # INT8

    # The resource name
    resource_name: "str"  # STRING

    # The resource pattern type
    resource_pattern_type: "int"  # INT8

    acls: List["Acls"]


@dataclass
class DescribeAclsResponseData(ResponseData):
    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    # Response error code
    error_code: "int"  # INT16

    # Response error message
    error_message: "Optional[str]"  # NULLABLE_STRING

    # The resources and their associated ACLs.
    resources: List["Resources"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.DESCRIBE_ACLS  # == 29


describeAclsRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("resource_type", int8Serializer),
        ("resource_name", nullableStringSerializer),
        ("principal", nullableStringSerializer),
        ("host", nullableStringSerializer),
        ("operation", int8Serializer),
        ("permission_type", int8Serializer),
        ("resource_pattern_type_filter", DummySerializer(int())),
    ],
    1: [
        ("resource_type", int8Serializer),
        ("resource_name", nullableStringSerializer),
        ("resource_pattern_type_filter", int8Serializer),
        ("principal", nullableStringSerializer),
        ("host", nullableStringSerializer),
        ("operation", int8Serializer),
        ("permission_type", int8Serializer),
    ],
}


describeAclsRequestDataSerializers: Dict[int, BaseSerializer[DescribeAclsRequestData]] = {
    version: NamedTupleSerializer(DescribeAclsRequestData, schema)
    for version, schema in describeAclsRequestDataSchemas.items()
}


aclsSchemas: Dict[int, Schema] = {
    0: [
        ("principal", stringSerializer),
        ("host", stringSerializer),
        ("operation", int8Serializer),
        ("permission_type", int8Serializer),
    ],
    1: [
        ("principal", stringSerializer),
        ("host", stringSerializer),
        ("operation", int8Serializer),
        ("permission_type", int8Serializer),
    ],
}


aclsSerializers: Dict[int, BaseSerializer[Acls]] = {
    version: NamedTupleSerializer(Acls, schema) for version, schema in aclsSchemas.items()
}


resourcesSchemas: Dict[int, Schema] = {
    0: [
        ("resource_type", int8Serializer),
        ("resource_name", stringSerializer),
        ("acls", ArraySerializer(aclsSerializers[0])),
        ("resource_pattern_type", DummySerializer(int())),
    ],
    1: [
        ("resource_type", int8Serializer),
        ("resource_name", stringSerializer),
        ("resource_pattern_type", int8Serializer),
        ("acls", ArraySerializer(aclsSerializers[1])),
    ],
}


resourcesSerializers: Dict[int, BaseSerializer[Resources]] = {
    version: NamedTupleSerializer(Resources, schema) for version, schema in resourcesSchemas.items()
}


describeAclsResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("throttle_time_ms", int32Serializer),
        ("error_code", int16Serializer),
        ("error_message", nullableStringSerializer),
        ("resources", ArraySerializer(resourcesSerializers[0])),
    ],
    1: [
        ("throttle_time_ms", int32Serializer),
        ("error_code", int16Serializer),
        ("error_message", nullableStringSerializer),
        ("resources", ArraySerializer(resourcesSerializers[1])),
    ],
}


describeAclsResponseDataSerializers: Dict[int, BaseSerializer[DescribeAclsResponseData]] = {
    version: NamedTupleSerializer(DescribeAclsResponseData, schema)
    for version, schema in describeAclsResponseDataSchemas.items()
}
