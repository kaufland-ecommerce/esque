# FIXME autogenerated module, check for errors!
from typing import Dict

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    BaseSerializer, NamedTupleSerializer, Schema, int16Serializer, int32Serializer, int64Serializer, stringSerializer
)


@dataclass
class AddOffsetsToTxnRequestData(RequestData):
    # The transactional id corresponding to the transaction.
    transactional_id: "str"  # STRING

    # Current producer id in use by the transactional id.
    producer_id: "int"  # INT64

    # Current epoch associated with the producer id.
    producer_epoch: "int"  # INT16

    # The unique group identifier
    group_id: "str"  # STRING

    @staticmethod
    def api_key() -> int:
        return ApiKey.ADD_OFFSETS_TO_TXN  # == 25


@dataclass
class AddOffsetsToTxnResponseData(ResponseData):
    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    # Response error code
    error_code: "int"  # INT16

    @staticmethod
    def api_key() -> int:
        return ApiKey.ADD_OFFSETS_TO_TXN  # == 25


addOffsetsToTxnRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("transactional_id", stringSerializer),
        ("producer_id", int64Serializer),
        ("producer_epoch", int16Serializer),
        ("group_id", stringSerializer),
    ],
    1: [
        ("transactional_id", stringSerializer),
        ("producer_id", int64Serializer),
        ("producer_epoch", int16Serializer),
        ("group_id", stringSerializer),
    ],
}


addOffsetsToTxnRequestDataSerializers: Dict[int, BaseSerializer[AddOffsetsToTxnRequestData]] = {
    version: NamedTupleSerializer(AddOffsetsToTxnRequestData, schema)
    for version, schema in addOffsetsToTxnRequestDataSchemas.items()
}


addOffsetsToTxnResponseDataSchemas: Dict[int, Schema] = {
    0: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer)],
    1: [("throttle_time_ms", int32Serializer), ("error_code", int16Serializer)],
}


addOffsetsToTxnResponseDataSerializers: Dict[int, BaseSerializer[AddOffsetsToTxnResponseData]] = {
    version: NamedTupleSerializer(AddOffsetsToTxnResponseData, schema)
    for version, schema in addOffsetsToTxnResponseDataSchemas.items()
}
