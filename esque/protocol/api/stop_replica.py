# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer,
    BaseSerializer,
    DummySerializer,
    NamedTupleSerializer,
    Schema,
    booleanSerializer,
    int16Serializer,
    int32Serializer,
    int64Serializer,
    stringSerializer,
)


@dataclass
class Partitions:
    # Name of topic
    topic: "str"  # STRING

    # The partition ids of a topic
    partition_ids: List["int"]  # INT32


@dataclass
class StopReplicaRequestData(RequestData):
    # The controller id
    controller_id: "int"  # INT32

    # The controller epoch
    controller_epoch: "int"  # INT32

    # The broker epoch
    broker_epoch: "int"  # INT64

    # Boolean which indicates if replica's partitions must be deleted.
    delete_partitions: "bool"  # BOOLEAN

    # The partitions
    partitions: List["Partitions"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.STOP_REPLICA  # == 5


@dataclass
class Partitions:
    # Name of topic
    topic: "str"  # STRING

    # Topic partition id
    partition: "int"  # INT32

    # Response error code
    error_code: "int"  # INT16


@dataclass
class StopReplicaResponseData(ResponseData):
    # Response error code
    error_code: "int"  # INT16

    # Response for the requests partitions
    partitions: List["Partitions"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.STOP_REPLICA  # == 5


partitionsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), (None, int32Serializer), ("partition_ids", DummySerializer([]))],
    1: [("topic", stringSerializer), ("partition_ids", ArraySerializer(int32Serializer))],
}


partitionsSerializers: Dict[int, BaseSerializer[Partitions]] = {
    version: NamedTupleSerializer(Partitions, schema) for version, schema in partitionsSchemas.items()
}


stopReplicaRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("controller_id", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("delete_partitions", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[0])),
        ("broker_epoch", DummySerializer(int())),
    ],
    1: [
        ("controller_id", int32Serializer),
        ("controller_epoch", int32Serializer),
        ("broker_epoch", int64Serializer),
        ("delete_partitions", booleanSerializer),
        ("partitions", ArraySerializer(partitionsSerializers[1])),
    ],
}


stopReplicaRequestDataSerializers: Dict[int, BaseSerializer[StopReplicaRequestData]] = {
    version: NamedTupleSerializer(StopReplicaRequestData, schema)
    for version, schema in stopReplicaRequestDataSchemas.items()
}


partitionsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("partition", int32Serializer), ("error_code", int16Serializer)],
    1: [("topic", stringSerializer), ("partition", int32Serializer), ("error_code", int16Serializer)],
}


partitionsSerializers: Dict[int, BaseSerializer[Partitions]] = {
    version: NamedTupleSerializer(Partitions, schema) for version, schema in partitionsSchemas.items()
}


stopReplicaResponseDataSchemas: Dict[int, Schema] = {
    0: [("error_code", int16Serializer), ("partitions", ArraySerializer(partitionsSerializers[0]))],
    1: [("error_code", int16Serializer), ("partitions", ArraySerializer(partitionsSerializers[1]))],
}


stopReplicaResponseDataSerializers: Dict[int, BaseSerializer[StopReplicaResponseData]] = {
    version: NamedTupleSerializer(StopReplicaResponseData, schema)
    for version, schema in stopReplicaResponseDataSchemas.items()
}
