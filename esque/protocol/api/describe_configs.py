# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer, BaseSerializer, DummySerializer, NamedTupleSerializer, Schema, booleanSerializer, int16Serializer,
    int32Serializer, int8Serializer, nullableStringSerializer, stringSerializer
)


@dataclass
class Resources:
    resource_type: "int"  # INT8

    resource_name: "str"  # STRING

    config_names: List["str"]  # STRING


@dataclass
class DescribeConfigsRequestData(RequestData):
    # An array of config resources to be returned.
    resources: List["Resources"]

    include_synonyms: "bool"  # BOOLEAN

    @staticmethod
    def api_key() -> int:
        return ApiKey.DESCRIBE_CONFIGS  # == 32


@dataclass
class ConfigSynonyms:
    config_name: "str"  # STRING

    config_value: "Optional[str]"  # NULLABLE_STRING

    config_source: "int"  # INT8


@dataclass
class ConfigEntries:
    config_name: "str"  # STRING

    config_value: "Optional[str]"  # NULLABLE_STRING

    read_only: "bool"  # BOOLEAN

    config_source: "int"  # INT8

    is_sensitive: "bool"  # BOOLEAN

    config_synonyms: List["ConfigSynonyms"]


@dataclass
class Resources:
    # Response error code
    error_code: "int"  # INT16

    # Response error message
    error_message: "Optional[str]"  # NULLABLE_STRING

    resource_type: "int"  # INT8

    resource_name: "str"  # STRING

    config_entries: List["ConfigEntries"]


@dataclass
class DescribeConfigsResponseData(ResponseData):
    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    resources: List["Resources"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.DESCRIBE_CONFIGS  # == 32


resourcesSchemas: Dict[int, Schema] = {
    0: [
        ("resource_type", int8Serializer),
        ("resource_name", stringSerializer),
        ("config_names", ArraySerializer(stringSerializer)),
    ],
    1: [
        ("resource_type", int8Serializer),
        ("resource_name", stringSerializer),
        ("config_names", ArraySerializer(stringSerializer)),
    ],
    2: [
        ("resource_type", int8Serializer),
        ("resource_name", stringSerializer),
        ("config_names", ArraySerializer(stringSerializer)),
    ],
}


resourcesSerializers: Dict[int, BaseSerializer[Resources]] = {
    version: NamedTupleSerializer(Resources, schema) for version, schema in resourcesSchemas.items()
}


describeConfigsRequestDataSchemas: Dict[int, Schema] = {
    0: [("resources", ArraySerializer(resourcesSerializers[0])), ("include_synonyms", DummySerializer(bool()))],
    1: [("resources", ArraySerializer(resourcesSerializers[1])), ("include_synonyms", booleanSerializer)],
    2: [("resources", ArraySerializer(resourcesSerializers[2])), ("include_synonyms", booleanSerializer)],
}


describeConfigsRequestDataSerializers: Dict[int, BaseSerializer[DescribeConfigsRequestData]] = {
    version: NamedTupleSerializer(DescribeConfigsRequestData, schema)
    for version, schema in describeConfigsRequestDataSchemas.items()
}


configSynonymsSchemas: Dict[int, Schema] = {
    1: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("config_source", int8Serializer),
    ],
    2: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("config_source", int8Serializer),
    ],
}


configSynonymsSerializers: Dict[int, BaseSerializer[ConfigSynonyms]] = {
    version: NamedTupleSerializer(ConfigSynonyms, schema) for version, schema in configSynonymsSchemas.items()
}


configEntriesSchemas: Dict[int, Schema] = {
    0: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("read_only", booleanSerializer),
        (None, booleanSerializer),
        ("is_sensitive", booleanSerializer),
        ("config_source", DummySerializer(int())),
        ("config_synonyms", DummySerializer([])),
    ],
    1: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("read_only", booleanSerializer),
        ("config_source", int8Serializer),
        ("is_sensitive", booleanSerializer),
        ("config_synonyms", ArraySerializer(configSynonymsSerializers[1])),
    ],
    2: [
        ("config_name", stringSerializer),
        ("config_value", nullableStringSerializer),
        ("read_only", booleanSerializer),
        ("config_source", int8Serializer),
        ("is_sensitive", booleanSerializer),
        ("config_synonyms", ArraySerializer(configSynonymsSerializers[2])),
    ],
}


configEntriesSerializers: Dict[int, BaseSerializer[ConfigEntries]] = {
    version: NamedTupleSerializer(ConfigEntries, schema) for version, schema in configEntriesSchemas.items()
}


resourcesSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("error_message", nullableStringSerializer),
        ("resource_type", int8Serializer),
        ("resource_name", stringSerializer),
        ("config_entries", ArraySerializer(configEntriesSerializers[0])),
    ],
    1: [
        ("error_code", int16Serializer),
        ("error_message", nullableStringSerializer),
        ("resource_type", int8Serializer),
        ("resource_name", stringSerializer),
        ("config_entries", ArraySerializer(configEntriesSerializers[1])),
    ],
    2: [
        ("error_code", int16Serializer),
        ("error_message", nullableStringSerializer),
        ("resource_type", int8Serializer),
        ("resource_name", stringSerializer),
        ("config_entries", ArraySerializer(configEntriesSerializers[2])),
    ],
}


resourcesSerializers: Dict[int, BaseSerializer[Resources]] = {
    version: NamedTupleSerializer(Resources, schema) for version, schema in resourcesSchemas.items()
}


describeConfigsResponseDataSchemas: Dict[int, Schema] = {
    0: [("throttle_time_ms", int32Serializer), ("resources", ArraySerializer(resourcesSerializers[0]))],
    1: [("throttle_time_ms", int32Serializer), ("resources", ArraySerializer(resourcesSerializers[1]))],
    2: [("throttle_time_ms", int32Serializer), ("resources", ArraySerializer(resourcesSerializers[2]))],
}


describeConfigsResponseDataSerializers: Dict[int, BaseSerializer[DescribeConfigsResponseData]] = {
    version: NamedTupleSerializer(DescribeConfigsResponseData, schema)
    for version, schema in describeConfigsResponseDataSchemas.items()
}
