# FIXME autogenerated module, check for errors!
from dataclasses import dataclass
from typing import Dict, Tuple, List, Optional

from esque.protocol.api.base import *
from esque.protocol.serializers import *


@dataclass
class Protocols:
    # The protocol name.
    name: "str"  # STRING

    # The protocol metadata.
    metadata: "bytes"  # BYTES


@dataclass
class JoinGroupRequestData(RequestData):
    # The group identifier.
    group_id: "str"  # STRING

    # The coordinator considers the consumer dead if it receives no heartbeat after this timeout in
    # milliseconds.
    session_timeout_ms: "int"  # INT32

    # The maximum time in milliseconds that the coordinator will wait for each member to rejoin when
    # rebalancing the group.
    rebalance_timeout_ms: "int"  # INT32

    # The member id assigned by the group coordinator.
    member_id: "str"  # STRING

    # The unique identifier of the consumer instance provided by end user.
    group_instance_id: "Optional[str]"  # NULLABLE_STRING

    # The unique name the for class of protocols implemented by the group we want to join.
    protocol_type: "str"  # STRING

    # The list of protocols that the member supports.
    protocols: List["Protocols"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.JOIN_GROUP  # == 11


@dataclass
class Members:
    # The group member ID.
    member_id: "str"  # STRING

    # The unique identifier of the consumer instance provided by end user.
    group_instance_id: "Optional[str]"  # NULLABLE_STRING

    # The group member metadata.
    metadata: "bytes"  # BYTES


@dataclass
class JoinGroupResponseData(ResponseData):
    # The duration in milliseconds for which the request was throttled due to a quota violation, or zero
    # if the request did not violate any quota.
    throttle_time_ms: "int"  # INT32

    # The error code, or 0 if there was no error.
    error_code: "int"  # INT16

    # The generation ID of the group.
    generation_id: "int"  # INT32

    # The group protocol selected by the coordinator.
    protocol_name: "str"  # STRING

    # The leader of the group.
    leader: "str"  # STRING

    # The group member ID.
    member_id: "str"  # STRING

    members: List["Members"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.JOIN_GROUP  # == 11


protocolsSchemas: Dict[int, Schema] = {
    0: [("name", stringSerializer), ("metadata", bytesSerializer)],
    1: [("name", stringSerializer), ("metadata", bytesSerializer)],
    2: [("name", stringSerializer), ("metadata", bytesSerializer)],
    3: [("name", stringSerializer), ("metadata", bytesSerializer)],
    4: [("name", stringSerializer), ("metadata", bytesSerializer)],
    5: [("name", stringSerializer), ("metadata", bytesSerializer)],
}


protocolsSerializers: Dict[int, BaseSerializer[Protocols]] = {
    version: NamedTupleSerializer(Protocols, schema) for version, schema in protocolsSchemas.items()
}


joinGroupRequestDataSchemas: Dict[int, Schema] = {
    0: [
        ("group_id", stringSerializer),
        ("session_timeout_ms", int32Serializer),
        ("member_id", stringSerializer),
        ("protocol_type", stringSerializer),
        ("protocols", ArraySerializer(protocolsSerializers[0])),
        ("rebalance_timeout_ms", DummySerializer(int())),
        ("group_instance_id", DummySerializer(None)),
    ],
    1: [
        ("group_id", stringSerializer),
        ("session_timeout_ms", int32Serializer),
        ("rebalance_timeout_ms", int32Serializer),
        ("member_id", stringSerializer),
        ("protocol_type", stringSerializer),
        ("protocols", ArraySerializer(protocolsSerializers[1])),
        ("group_instance_id", DummySerializer(None)),
    ],
    2: [
        ("group_id", stringSerializer),
        ("session_timeout_ms", int32Serializer),
        ("rebalance_timeout_ms", int32Serializer),
        ("member_id", stringSerializer),
        ("protocol_type", stringSerializer),
        ("protocols", ArraySerializer(protocolsSerializers[2])),
        ("group_instance_id", DummySerializer(None)),
    ],
    3: [
        ("group_id", stringSerializer),
        ("session_timeout_ms", int32Serializer),
        ("rebalance_timeout_ms", int32Serializer),
        ("member_id", stringSerializer),
        ("protocol_type", stringSerializer),
        ("protocols", ArraySerializer(protocolsSerializers[3])),
        ("group_instance_id", DummySerializer(None)),
    ],
    4: [
        ("group_id", stringSerializer),
        ("session_timeout_ms", int32Serializer),
        ("rebalance_timeout_ms", int32Serializer),
        ("member_id", stringSerializer),
        ("protocol_type", stringSerializer),
        ("protocols", ArraySerializer(protocolsSerializers[4])),
        ("group_instance_id", DummySerializer(None)),
    ],
    5: [
        ("group_id", stringSerializer),
        ("session_timeout_ms", int32Serializer),
        ("rebalance_timeout_ms", int32Serializer),
        ("member_id", stringSerializer),
        ("group_instance_id", nullableStringSerializer),
        ("protocol_type", stringSerializer),
        ("protocols", ArraySerializer(protocolsSerializers[5])),
    ],
}


joinGroupRequestDataSerializers: Dict[int, BaseSerializer[JoinGroupRequestData]] = {
    version: NamedTupleSerializer(JoinGroupRequestData, schema)
    for version, schema in joinGroupRequestDataSchemas.items()
}


membersSchemas: Dict[int, Schema] = {
    0: [
        ("member_id", stringSerializer),
        ("metadata", bytesSerializer),
        ("group_instance_id", DummySerializer(None)),
    ],
    1: [
        ("member_id", stringSerializer),
        ("metadata", bytesSerializer),
        ("group_instance_id", DummySerializer(None)),
    ],
    2: [
        ("member_id", stringSerializer),
        ("metadata", bytesSerializer),
        ("group_instance_id", DummySerializer(None)),
    ],
    3: [
        ("member_id", stringSerializer),
        ("metadata", bytesSerializer),
        ("group_instance_id", DummySerializer(None)),
    ],
    4: [
        ("member_id", stringSerializer),
        ("metadata", bytesSerializer),
        ("group_instance_id", DummySerializer(None)),
    ],
    5: [
        ("member_id", stringSerializer),
        ("group_instance_id", nullableStringSerializer),
        ("metadata", bytesSerializer),
    ],
}


membersSerializers: Dict[int, BaseSerializer[Members]] = {
    version: NamedTupleSerializer(Members, schema) for version, schema in membersSchemas.items()
}


joinGroupResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("generation_id", int32Serializer),
        ("protocol_name", stringSerializer),
        ("leader", stringSerializer),
        ("member_id", stringSerializer),
        ("members", ArraySerializer(membersSerializers[0])),
        ("throttle_time_ms", DummySerializer(int())),
    ],
    1: [
        ("error_code", int16Serializer),
        ("generation_id", int32Serializer),
        ("protocol_name", stringSerializer),
        ("leader", stringSerializer),
        ("member_id", stringSerializer),
        ("members", ArraySerializer(membersSerializers[1])),
        ("throttle_time_ms", DummySerializer(int())),
    ],
    2: [
        ("throttle_time_ms", int32Serializer),
        ("error_code", int16Serializer),
        ("generation_id", int32Serializer),
        ("protocol_name", stringSerializer),
        ("leader", stringSerializer),
        ("member_id", stringSerializer),
        ("members", ArraySerializer(membersSerializers[2])),
    ],
    3: [
        ("throttle_time_ms", int32Serializer),
        ("error_code", int16Serializer),
        ("generation_id", int32Serializer),
        ("protocol_name", stringSerializer),
        ("leader", stringSerializer),
        ("member_id", stringSerializer),
        ("members", ArraySerializer(membersSerializers[3])),
    ],
    4: [
        ("throttle_time_ms", int32Serializer),
        ("error_code", int16Serializer),
        ("generation_id", int32Serializer),
        ("protocol_name", stringSerializer),
        ("leader", stringSerializer),
        ("member_id", stringSerializer),
        ("members", ArraySerializer(membersSerializers[4])),
    ],
    5: [
        ("throttle_time_ms", int32Serializer),
        ("error_code", int16Serializer),
        ("generation_id", int32Serializer),
        ("protocol_name", stringSerializer),
        ("leader", stringSerializer),
        ("member_id", stringSerializer),
        ("members", ArraySerializer(membersSerializers[5])),
    ],
}


joinGroupResponseDataSerializers: Dict[int, BaseSerializer[JoinGroupResponseData]] = {
    version: NamedTupleSerializer(JoinGroupResponseData, schema)
    for version, schema in joinGroupResponseDataSchemas.items()
}
