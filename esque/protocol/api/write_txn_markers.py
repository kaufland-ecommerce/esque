# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer,
    BaseSerializer,
    NamedTupleSerializer,
    Schema,
    booleanSerializer,
    int16Serializer,
    int32Serializer,
    int64Serializer,
    stringSerializer,
)


@dataclass
class Topics:
    # Name of topic
    topic: "str"  # STRING

    partitions: List["int"]  # INT32


@dataclass
class TransactionMarkers:
    # Current producer id in use by the transactional id.
    producer_id: "int"  # INT64

    # Current epoch associated with the producer id.
    producer_epoch: "int"  # INT16

    # The result of the transaction to write to the partitions (false = ABORT, true = COMMIT).
    transaction_result: "bool"  # BOOLEAN

    # The partitions to write markers for.
    topics: List["Topics"]

    # Epoch associated with the transaction state partition hosted by this transaction coordinator
    coordinator_epoch: "int"  # INT32


@dataclass
class WriteTxnMarkersRequestData(RequestData):
    # The transaction markers to be written.
    transaction_markers: List["TransactionMarkers"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.WRITE_TXN_MARKERS  # == 27


@dataclass
class Partitions:
    # Topic partition id
    partition: "int"  # INT32

    # Response error code
    error_code: "int"  # INT16


@dataclass
class Topics:
    # Name of topic
    topic: "str"  # STRING

    partitions: List["Partitions"]


@dataclass
class TransactionMarkers:
    # Current producer id in use by the transactional id.
    producer_id: "int"  # INT64

    # Errors per partition from writing markers.
    topics: List["Topics"]


@dataclass
class WriteTxnMarkersResponseData(ResponseData):
    # Errors per partition from writing markers.
    transaction_markers: List["TransactionMarkers"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.WRITE_TXN_MARKERS  # == 27


topicsSchemas: Dict[int, Schema] = {0: [("topic", stringSerializer), ("partitions", ArraySerializer(int32Serializer))]}


topicsSerializers: Dict[int, BaseSerializer[Topics]] = {
    version: NamedTupleSerializer(Topics, schema) for version, schema in topicsSchemas.items()
}


transactionMarkersSchemas: Dict[int, Schema] = {
    0: [
        ("producer_id", int64Serializer),
        ("producer_epoch", int16Serializer),
        ("transaction_result", booleanSerializer),
        ("topics", ArraySerializer(topicsSerializers[0])),
        ("coordinator_epoch", int32Serializer),
    ]
}


transactionMarkersSerializers: Dict[int, BaseSerializer[TransactionMarkers]] = {
    version: NamedTupleSerializer(TransactionMarkers, schema) for version, schema in transactionMarkersSchemas.items()
}


writeTxnMarkersRequestDataSchemas: Dict[int, Schema] = {
    0: [("transaction_markers", ArraySerializer(transactionMarkersSerializers[0]))]
}


writeTxnMarkersRequestDataSerializers: Dict[int, BaseSerializer[WriteTxnMarkersRequestData]] = {
    version: NamedTupleSerializer(WriteTxnMarkersRequestData, schema)
    for version, schema in writeTxnMarkersRequestDataSchemas.items()
}


partitionsSchemas: Dict[int, Schema] = {0: [("partition", int32Serializer), ("error_code", int16Serializer)]}


partitionsSerializers: Dict[int, BaseSerializer[Partitions]] = {
    version: NamedTupleSerializer(Partitions, schema) for version, schema in partitionsSchemas.items()
}


topicsSchemas: Dict[int, Schema] = {
    0: [("topic", stringSerializer), ("partitions", ArraySerializer(partitionsSerializers[0]))]
}


topicsSerializers: Dict[int, BaseSerializer[Topics]] = {
    version: NamedTupleSerializer(Topics, schema) for version, schema in topicsSchemas.items()
}


transactionMarkersSchemas: Dict[int, Schema] = {
    0: [("producer_id", int64Serializer), ("topics", ArraySerializer(topicsSerializers[0]))]
}


transactionMarkersSerializers: Dict[int, BaseSerializer[TransactionMarkers]] = {
    version: NamedTupleSerializer(TransactionMarkers, schema) for version, schema in transactionMarkersSchemas.items()
}


writeTxnMarkersResponseDataSchemas: Dict[int, Schema] = {
    0: [("transaction_markers", ArraySerializer(transactionMarkersSerializers[0]))]
}


writeTxnMarkersResponseDataSerializers: Dict[int, BaseSerializer[WriteTxnMarkersResponseData]] = {
    version: NamedTupleSerializer(WriteTxnMarkersResponseData, schema)
    for version, schema in writeTxnMarkersResponseDataSchemas.items()
}
