# FIXME autogenerated module, check for errors!
from typing import Dict, List

from dataclasses import dataclass

from esque.protocol.api.base import ApiKey, RequestData, ResponseData
from esque.protocol.serializers import (
    ArraySerializer,
    BaseSerializer,
    NamedTupleSerializer,
    Schema,
    bytesSerializer,
    int16Serializer,
    int32Serializer,
    int64Serializer,
    stringSerializer,
)


@dataclass
class Renewers:
    # principalType of the Kafka principal
    principal_type: "str"  # STRING

    # name of the Kafka principal
    name: "str"  # STRING


@dataclass
class CreateDelegationTokenRequestData(RequestData):
    # An array of token renewers. Renewer is an Kafka PrincipalType and name string, who is allowed to
    # renew this token before the max lifetime expires.
    renewers: List["Renewers"]

    # Max lifetime period for token in milli seconds. if value is -1, then max lifetime  will default to a
    # server side config value.
    max_life_time: "int"  # INT64

    @staticmethod
    def api_key() -> int:
        return ApiKey.CREATE_DELEGATION_TOKEN  # == 38


@dataclass
class Owner:
    # principalType of the Kafka principal
    principal_type: "str"  # STRING

    # name of the Kafka principal
    name: "str"  # STRING


@dataclass
class CreateDelegationTokenResponseData(ResponseData):
    # Response error code
    error_code: "int"  # INT16

    # token owner.
    owner: "Owner"

    # timestamp (in msec) when this token was generated.
    issue_timestamp: "int"  # INT64

    # timestamp (in msec) at which this token expires.
    expiry_timestamp: "int"  # INT64

    # max life time of this token.
    max_timestamp: "int"  # INT64

    # UUID to ensure uniqueness.
    token_id: "str"  # STRING

    # HMAC of the delegation token.
    hmac: "bytes"  # BYTES

    # Duration in milliseconds for which the request was throttled due to quota violation (Zero if the
    # request did not violate any quota)
    throttle_time_ms: "int"  # INT32

    @staticmethod
    def api_key() -> int:
        return ApiKey.CREATE_DELEGATION_TOKEN  # == 38


renewersSchemas: Dict[int, Schema] = {
    0: [("principal_type", stringSerializer), ("name", stringSerializer)],
    1: [("principal_type", stringSerializer), ("name", stringSerializer)],
}


renewersSerializers: Dict[int, BaseSerializer[Renewers]] = {
    version: NamedTupleSerializer(Renewers, schema) for version, schema in renewersSchemas.items()
}


createDelegationTokenRequestDataSchemas: Dict[int, Schema] = {
    0: [("renewers", ArraySerializer(renewersSerializers[0])), ("max_life_time", int64Serializer)],
    1: [("renewers", ArraySerializer(renewersSerializers[1])), ("max_life_time", int64Serializer)],
}


createDelegationTokenRequestDataSerializers: Dict[int, BaseSerializer[CreateDelegationTokenRequestData]] = {
    version: NamedTupleSerializer(CreateDelegationTokenRequestData, schema)
    for version, schema in createDelegationTokenRequestDataSchemas.items()
}


ownerSchemas: Dict[int, Schema] = {
    0: [("principal_type", stringSerializer), ("name", stringSerializer)],
    1: [("principal_type", stringSerializer), ("name", stringSerializer)],
}


ownerSerializers: Dict[int, BaseSerializer[Owner]] = {
    version: NamedTupleSerializer(Owner, schema) for version, schema in ownerSchemas.items()
}


createDelegationTokenResponseDataSchemas: Dict[int, Schema] = {
    0: [
        ("error_code", int16Serializer),
        ("owner", ownerSerializers[0]),
        ("issue_timestamp", int64Serializer),
        ("expiry_timestamp", int64Serializer),
        ("max_timestamp", int64Serializer),
        ("token_id", stringSerializer),
        ("hmac", bytesSerializer),
        ("throttle_time_ms", int32Serializer),
    ],
    1: [
        ("error_code", int16Serializer),
        ("owner", ownerSerializers[1]),
        ("issue_timestamp", int64Serializer),
        ("expiry_timestamp", int64Serializer),
        ("max_timestamp", int64Serializer),
        ("token_id", stringSerializer),
        ("hmac", bytesSerializer),
        ("throttle_time_ms", int32Serializer),
    ],
}


createDelegationTokenResponseDataSerializers: Dict[int, BaseSerializer[CreateDelegationTokenResponseData]] = {
    version: NamedTupleSerializer(CreateDelegationTokenResponseData, schema)
    for version, schema in createDelegationTokenResponseDataSchemas.items()
}
