# FIXME autogenerated module, check for errors!
from dataclasses import dataclass
from typing import Dict, Tuple, List, Optional

from esque.protocol.api.base import *
from esque.protocol.serializers import *


@dataclass
class DeleteTopicsRequestData(RequestData):
    # The names of the topics to delete
    topic_names: List["str"]  # STRING

    # The length of time in milliseconds to wait for the deletions to complete.
    timeout_ms: "int"  # INT32

    @staticmethod
    def api_key() -> int:
        return ApiKey.DELETE_TOPICS  # == 20


@dataclass
class Responses:
    # The topic name
    name: "str"  # STRING

    # The deletion error, or 0 if the deletion succeeded.
    error_code: "int"  # INT16


@dataclass
class DeleteTopicsResponseData(ResponseData):
    # The duration in milliseconds for which the request was throttled due to a quota violation, or zero
    # if the request did not violate any quota.
    throttle_time_ms: "int"  # INT32

    # The results for each topic we tried to delete.
    responses: List["Responses"]

    @staticmethod
    def api_key() -> int:
        return ApiKey.DELETE_TOPICS  # == 20


deleteTopicsRequestDataSchemas: Dict[int, Schema] = {
    0: [("topic_names", ArraySerializer(stringSerializer)), ("timeout_ms", int32Serializer)],
    1: [("topic_names", ArraySerializer(stringSerializer)), ("timeout_ms", int32Serializer)],
    2: [("topic_names", ArraySerializer(stringSerializer)), ("timeout_ms", int32Serializer)],
    3: [("topic_names", ArraySerializer(stringSerializer)), ("timeout_ms", int32Serializer)],
}


deleteTopicsRequestDataSerializers: Dict[int, BaseSerializer[DeleteTopicsRequestData]] = {
    version: NamedTupleSerializer(DeleteTopicsRequestData, schema)
    for version, schema in deleteTopicsRequestDataSchemas.items()
}


responsesSchemas: Dict[int, Schema] = {
    0: [("name", stringSerializer), ("error_code", int16Serializer)],
    1: [("name", stringSerializer), ("error_code", int16Serializer)],
    2: [("name", stringSerializer), ("error_code", int16Serializer)],
    3: [("name", stringSerializer), ("error_code", int16Serializer)],
}


responsesSerializers: Dict[int, BaseSerializer[Responses]] = {
    version: NamedTupleSerializer(Responses, schema) for version, schema in responsesSchemas.items()
}


deleteTopicsResponseDataSchemas: Dict[int, Schema] = {
    0: [("responses", ArraySerializer(responsesSerializers[0])), ("throttle_time_ms", DummySerializer(int()))],
    1: [("throttle_time_ms", int32Serializer), ("responses", ArraySerializer(responsesSerializers[1]))],
    2: [("throttle_time_ms", int32Serializer), ("responses", ArraySerializer(responsesSerializers[2]))],
    3: [("throttle_time_ms", int32Serializer), ("responses", ArraySerializer(responsesSerializers[3]))],
}


deleteTopicsResponseDataSerializers: Dict[int, BaseSerializer[DeleteTopicsResponseData]] = {
    version: NamedTupleSerializer(DeleteTopicsResponseData, schema)
    for version, schema in deleteTopicsResponseDataSchemas.items()
}
