name: Publish esque
on:
  push:
    branches:
      - master
env:
  PREVIOUS_TAG: "none"
  VERSION: "unknown"

jobs:
  publish-to-pypi:
    name: Publish to pypi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Check presence of proper tag
        run: |
          VERSION=$(sed -n -E "s/^version = \"(.+)\"/\1/p" pyproject.toml)
          PREVIOUS_TAG=$(git log --decorate=full --max-count 1 | grep -oP "refs/tags/v${VERSION}" | sed 's,refs/tags/,,g')
      - name: Setup python and install packages
        if: ${PREVIOUS_TAG} == ${VERSION}
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
          architecture: x64
      - name: Prepare environment for publish
        if: success() && ${PREVIOUS_TAG} == ${VERSION}
        run: |
          pip install "poetry==1.0.0b3"
          poetry config repositories.testpypi http://test.pypi.org/legacy
      - name: Publish to test pypi
        if: success() && ${PREVIOUS_TAG} == ${VERSION}
        run: |
          poetry build
          poetry publish --repository testpypi --username "${{ secrets.TEST_PYPI_USER }}" --password "${{ secrets.TEST_PYPI_PASSWORD }}"
      - name: Test the testpypi release
        if: success() && ${PREVIOUS_TAG} == ${VERSION}
        run: |
          pushd /tmp
          pip install -i http://test.pypi.org/legacy --timeout 60 esque==${VERSION}
          esque --help
          popd
      - name: Publish to pypi
        if: success() && ${PREVIOUS_TAG} == ${VERSION}
        run: |
          poetry build
          poetry publish --username "${{ secrets.PYPI_USER }}" --password "${{ secrets.PYPI_PASSWORD }}"
  draft-release:
    name: Draft release
    needs: [ publish-to-pypi ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        if: ${PREVIOUS_TAG} == ${VERSION}
        uses: actions/checkout@v1
      - name: Create Release
        id: create_release
        if: ${PREVIOUS_TAG} == ${VERSION}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: 'true'
          prerelease: 'true'
